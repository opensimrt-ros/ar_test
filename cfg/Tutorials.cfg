#!/usr/bin/env python
PACKAGE = "ar_test"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
gen.add("double_paramr", double_t, 0, "Roll",   0, -3.14,   3.14)
gen.add("double_paramp", double_t, 0, "Pitch",   0, -3.14,   3.14)
gen.add("double_paramy", double_t, 0, "Yaw",   0, -3.14,   3.14)
gen.add("use_q",   bool_t,   0, "Use quat. instead of euler",  True)
gen.add("double_paramqx", double_t, 0, "q:x",   0, -1,   1)
gen.add("double_paramqy", double_t, 0, "q:y",   0, -1,   1)
gen.add("double_paramqz", double_t, 0, "q:z",   0, -1,   1)
gen.add("double_paramqw", double_t, 0, "q:w",   1, -1,   1)
gen.add("parent_frame_id",    str_t,    0, "Parent frame id",  "map")
gen.add("child_frame_id",    str_t,    0, "Child frame id",  "frame_0")
gen.add("new_frame_id",    str_t,    0, "New frame id",  "frame_1")
gen.add("bool_paramx",   bool_t,   0, "Invert X",  False)
gen.add("bool_paramy",   bool_t,   0, "Invert Y",  False)
gen.add("bool_paramz",   bool_t,   0, "Invert Z",  False)

size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "ar_test", "Tutorials"))

